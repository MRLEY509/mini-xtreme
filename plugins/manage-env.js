//---------------------------------------------------------------------------
//           RAHEEM-XMD-3 
//---------------------------------------------------------------------------
//  ‚ö†Ô∏è DO NOT MODIFY THIS FILE ‚ö†Ô∏è  
//---------------------------------------------------------------------------
const { cmd, commands } = require('../command');
const config = require('../config');
const prefix = config.PREFIX;
const fs = require('fs');
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, sleep, fetchJson } = require('../lib/functions2');
const { writeFileSync } = require('fs');
const path = require('path');

cmd({
    pattern: "antipromote",
    alias: ["adminevents"],
    desc: "Enable or disable admin event notifications",
    category: "settings",
    filename: __filename
},
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const status = args[0]?.toLowerCase();
    if (status === "on") {
        config.ADMIN_EVENTS = "true";
        return reply("‚úÖ Admin event notifications are now enabled.");
    } else if (status === "off") {
        config.ADMIN_EVENTS = "false";
        return reply("‚ùå Admin event notifications are now disabled.");
    } else {
        return reply(`Example: .admin-events on`);
    }
});

cmd({
    pattern: "welcome",
    alias: ["welcomeset"],
    desc: "Enable or disable welcome messages for new members",
    category: "settings",
    filename: __filename
},
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const status = args[0]?.toLowerCase();
    if (status === "on") {
        config.WELCOME = "true";
        return reply("*_‚úÖ ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Ä Ä·¥á …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö_*");
    } else if (status === "off") {
        config.WELCOME = "false";
        return reply("*_‚ùå ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Ä Ä·¥á …¥·¥è·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö_*");
    } else {
        return reply(`Example: .welcome on`);
    }
});


cmd({
    pattern: "mode",
    alias: ["setmode"],
    react: "üí´",
    desc: "Set bot mode to private or public.",
    category: "settings",
    filename: __filename,
}, async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return reply("*_·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!_*");

    // Si aucun argument n'est fourni, afficher le mode actuel et l'usage
    if (!args[0]) {
        return reply(`*_üìå ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥ç·¥è·¥Ö·¥á:_* *${config.MODE}*\n\n·¥ús·¥Ä…¢·¥á: .·¥ç·¥è·¥Ö·¥á Ä…¥ ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ·¥è Ä .·¥ç·¥è·¥Ö·¥á ·¥ò·¥ú ô ü…™·¥Ñ`);
    }

    const modeArg = args[0].toLowerCase();

    if (modeArg === "private") {
        config.MODE = "private";
        return reply("‚ï≠‚îÄ „Äå *\`ùêåùêàùêçùêà-ùêóùêìùêëùêÑùêåùêÑ\`* „Äç\n‚îÇ üì° *s·¥õ·¥Ä·¥õ·¥ús*       : ·¥è…¥ ü…™…¥·¥á ‚úÖ\n‚îÇ üîß *·¥ç·¥è·¥Ö·¥á  ô·¥è·¥õ*     : ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç\n> *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥ò Ä…™…¥·¥Ñ·¥á x·¥õ Ä·¥á·¥ç·¥á*");
    } else if (modeArg === "public") {
        config.MODE = "public";
        return reply("‚ï≠‚îÄ „Äå *\`ùêåùêàùêçùêà-ùêóùêìùêëùêÑùêåùêÑ\`* „Äç\n‚îÇ üì° *s·¥õ·¥Ä·¥õ·¥ús*       : ·¥è…¥ ü…™…¥·¥á ‚úÖ\n‚îÇ üîß *·¥ç·¥è·¥Ö·¥á  ô·¥è·¥õ*     :·¥ò·¥ú ô ü…™·¥Ñ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç\n> *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥ò Ä…™…¥·¥Ñ·¥á x·¥õ Ä·¥á·¥ç·¥á*");
    } else {
        return reply("*_‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ç·¥è·¥Ö·¥á. ·¥ò ü·¥á·¥Äs·¥á ·¥ús·¥á_* `.·¥ç·¥è·¥Ö·¥á ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á` ·¥è Ä `.·¥ç·¥è·¥Ö·¥á ·¥ò·¥ú ô ü…™·¥Ñ`.");
    }
});

//--------------------------------------------
// AUTO_LIKE_STATUS COMMANDS
//--------------------------------------------
cmd({
    pattern: "status-react",
    alias: ["statusreaction"],
    desc: "Enable or disable auto-liking of statuses",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const status = args[0]?.toLowerCase();
    // Default value for AUTO_LIKE_STATUS is "false"
    if (args[0] === "on") {
        config.AUTO_STATUS_REACT = "true";
        return reply("Auto-liking of statuses is now enabled.");
    } else if (args[0] === "off") {
        config.AUTO_STATUS_REACT = "false";
        return reply("Auto-liking of statuses is now disabled.");
    } else {
        return reply(`Example: . status-react on`);
    }
});

//--------------------------------------------
//   AUTO-REACT COMMANDS
//--------------------------------------------
cmd({
    pattern: "auto-react",
    alias: ["autoreact"],
    desc: "Enable or disable the autoreact feature",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const status = args[0]?.toLowerCase();
    // Check the argument for enabling or disabling the anticall feature
    if (args[0] === "on") {
        config.AUTO_REACT = "true";
        await reply("*autoreact feature is now enabled.*");
    } else if (args[0] === "off") {
        config.AUTO_REACT = "false";
        await reply("autoreact feature is now disabled.");
    } else {
        await reply(`*ü´ü ·¥áx·¥Ä·¥ç·¥ò ü·¥á: .·¥Ä·¥ú·¥õ·¥è- Ä·¥á·¥Ä·¥Ñ·¥õ ·¥è…¥*`);
    }
});
//--------------------------------------------
//   ANTI-LINK COMMANDS
//--------------------------------------------
cmd({
  pattern: "deletelink",
  alias: ["linksdelete"],
  desc: "Enable or disable DELETE_LINKS in groups",
  category: "group",
  react: "‚ùå",
  filename: __filename
}, async (conn, mek, m, { isGroup, isAdmins, isBotAdmins, args, reply }) => {
  try {
    if (!isGroup) return reply('This command can only be used in a group.');
    if (!isBotAdmins) return reply('Bot must be an admin to use this command.');
    if (!isAdmins) return reply('You must be an admin to use this command.');

    if (args[0] === "on") {
      config.DELETE_LINKS = "true";
      reply("‚úÖ DELETE_LINKS is now enabled.");
    } else if (args[0] === "off") {
      config.DELETE_LINKS = "false";
      reply("‚ùå DELETE_LINKS is now disabled.");
    } else {
      reply("Usage: *.deletelink on/off*");
    }
  } catch (e) {
    reply(`Error: ${e.message}`);
  }
});
                      
